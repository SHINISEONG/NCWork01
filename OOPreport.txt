<<< OOP의 이해 REPORT >>>

1. OOP(Object Oriented Programming. 객체 지향 프로그래밍)
	객체 지향 프로그래밍은 기존의 절차적 코딩의 한계에서 벗어나 현실세계를 좀 더 직관적으로 잘 구현해 낼 수 있는 프로그래밍 기법이다.
	절차적 언어에서 절차적이지 않은 것들을 구현하려면 goto문 등으로 구현했어야 하는데, 이 같은 경우 로직이 조금만 복잡해져도 알아보기 힘든 스파게티 코드가 되어버린다.
	이와 다르게 객체지향은 간단한 기능들을 하는 모듈들을 여럿 만들어놓고 해당 기능이 필요할 때 객체를 호출하는 방식으로 프로그램을 구성할 수 있다.
	이는 코드 설계와 이해의 편리함 외에도 코드의 재사용성등을 높여 더 효율적인 코딩을 가능하게 한다.

2. Object(객체)
	객체란 현실 세계에 있는 개념이나 사물 모든 것이 객체가 될 수 있다.
	객체를 잘 구현하기 위해서는 결국 객체가 될 것들을 잘 이해하는 것이 중요하다.
	이해를 위해 분석과정이 필요하고 분석에 따라 설계 후 구현작업에 들어갈 수 있다.
	분석 시에는 상태 등을 나타내는 속성(Property)과 행위를 나타내는 기능(function) 두 가지로 크게 분류하여 객체를 분석 할 수 있다.
	즉, 객체는 보통 속성과 기능이라는 두 요소로 이루어져 있다고 표현할 수 있다.
	일반적으로 객체는 다수의 속성과 기능을 가지며 이 들을 객체의 멤버(member, 구성원)이라고 부른다.

	* 분석시 고려할 두 요소
		1)속성(Property) : Field나 Member Variable로도 불리운다. 보통 명사, 형용사화 시킬 수 있는 상태나 속성을 나타낸다.
       	 	                          자동으로 변하는 것과 기능을 통해 변하는 것 변하지 않는 것등 다양한 특징들을 가질 수 있다.
		2)기능(Function) : Method라고 많이 지칭된다. 동사로 표현 될 수 있는 행위나 기능을 나타낸다.

		ex) '신희성'이라는 객체를 속성과 기능으로 나누어 분류하고 그에 해당하는 것들을 나열해 보자.

			[OBJECT] Shin hee seong
			[1] Field(=Property, Member variable)
				a. 이름
				b. 직업
				c. 키
				d. 몸무게
				r. 근육량
				f. 지방량
				g. 컨디션 - 피곤함, 배고픔 등. 피곤함과 배고픔이 증가하면 컨디션은 하락하는 관계를 가진다. 이처럼 필드와 필드끼리도 상관관계를 가질 수 있다.
			[2] Method(=Function)
				a. 유산소 운동 -> 해당 메소드 실행시 Field에 해당하는 지방량--; 피곤함++; 배고픔++; 라는 식으로 기능에 따른 필드 변화가 일어날 수 있다.
				b. 근력 운동 -> 마찬가지로 근육량++; 몸무게++; 피곤함++; 배고픔++; 의 결과로 나타날 수 있다.

3. Class(클래스)
	객체를 정의한 것이다.
	때문에 앞서 분석한 객체의 모든 속성과 기능이 정의되어 있다.
	필드와 메소드의 상관관계를 정확하게 분석할 수록 내가 구현하려는 객체를 정확하게 구현할 수 있다.
		
		ex)
			앞의 객체 분석을 클래스로 표현하는 예를 들자면

			public class ShinHeeseong {
				String name = "신희성";
				String job = "무직";
				int height = 181;
				int weight = 86;
				int muscleMass = 40;
				int fatMass = 20;
				int hunger = 0;
				int fatigue = 0;
				int condition = -1*(hunger+fatigue)

				public void aerobic() {
					fatMass--;
					fatigue++;
					hunger++;
				}

			}

		라는 식으로 표현해 볼 수 있다.

4. abstraction(추상화)
	먼저 추상은 다음과 같은 사전적 의미를 가진다.
		*추상 : 낱낱의 구체적 표상이나 개념에서 공통된 성질을 뽑아 이를 일반적인 개념으로 파악하는 정신 작용
	여러 클래스의 공통적인 메소드를 파악해 해당 공통메소드에 필요한 변수들의 선언부를 미리 만들어 놓는 것이다.

5. generalization(일반화)/inheritance(상속)
	1) 일반화
		여러 객체들을 더 포괄적인 개념으로 표현하는 것
		ex) 신희성, 전지창, 김양수 -> 비트캠프 수강생
	2) 상속
		부모 클래스로의 생성자를 가져와 자식 클래스의 생성자로 사용하는 것

6. Specialization(특수화)
	일반화의 반대 개념. 하나의 큰 객체에 속하는 여러 하위 개념의 객체로 표현하는 것
	ex) 비트캠프 수강생 -> 신희성, 전지창, 김양수

7. Realization(실체화)
	interface의 spec만 존재하는 method를 overriding하여 실제 기능으로 구현하는 것
	*(Copy & Paste. 이해불가)

8. Association(연관)
	다른 Object의 Reference를 가지는 Field
	*(Copy & Paste. 이해불가)

9. Dependency(의존)
	class가 class를 reference.
	association과의 차이점은 field단위인지 class단위 차이.(?)
	*(Copy & Paste. 이해불가)

10. Polymorphism(다형성)
	하나의 객체가 여러 Type을 가질 수 있는 것
	Primitive Data Type에서 Explicit Casting과 implicit casting을 통해 형변환이 일어났듯이 부모 자식간의 class 타입 변수에서도 형 변환을 할 수 있다.
	기본형 데이터형에서 더 큰 범위의 타입을 작은 타입으로 변환할때 명시적형변환으로 강제 변환을 했듯이 자식 클래스 타입에 부모 클래스 타입을 value assignment하려면 
	자식 클래스 타입 변수 = ([자식클래스명])부모 클래스 타입 변수
	로 형 변환을 해주어야 한다.
	이렇듯 하나의 객체가 여러 타입을 가질 수 있는 것을 다형성 이라고 한다.

11. Encapsulation(캡슐화)
	관련이 있는 member variable과 method를 하나로 묶는 것을 캡슐화라고 한다.
	캡슐화의 큰 장점중 하나는 바로 정보 은닉이다.
	접근 제한자 private를 통해 변수를 선언하면 해당 변수는 클래스 외부에서 직접 접근할 수 없고
	오직 public으로 정의한 method를 통해서만 접근이 가능하다.
	이는 프로그램의 규모가 커지고 복잡해 지더라도 클래스 내부의 데이터들이 다른 요인에 의해 오염되는 것을 최소한으로 만들어 준다.